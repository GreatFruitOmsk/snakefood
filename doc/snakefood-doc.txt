=============================
   Snakefood Documentation
=============================
:Date: 2007-05-10
:Abstract:

    Documentation for Snakefood, a dependency graph generator for
    Python.


You need to install graphviz to generate graphs.



5-second Usage Instructions
===========================

Here is the simplest way to generate a Graphviz graph file ::
   
   snakefood /myproject | snakefood-graph > myproject.dot

Then you can generate a PDF file from it using UNIX tools::

   cat myproject.dot | dot -Tps | pstopdf -i -o myproject.pdf

This will probably not do what you want, however, unless your project
is pretty small.  The dependency graphs for reasonably sized projects
are very complex.  

You will most likely want to cluster files together by directories
depending on your project.  To do this, create a cluster file and use
the ``snakefood-cluster`` tool::

   snakefood /myproject | snakefood-cluster -f myproject.clusters | snakefood-graph > myproject.dot

Also, as you experiment you will want to avoid having regenerating the
raw unfiltered and unclustered dependencies every time (this can be a
little slow to compute).  Follow the more detailed instructions below
on how to do this.







- Add this documentation before 1.0:

  * The simplest possible run.

      “but this probably won't do what you want it to.”
      “there is not formula for filtering, that has to be a custom
       process.  See the Makefile provided in the test directory.”

  * Show the makefile rules.

  * Create a flow diagram of the different kinds of types generated.

    - Show what the various scripts do.

  * Explain the format of the deps file, including the special case of
    None, None.

  * Explain --internal





Overview
========

Generate dependency graphs from Python code.  This dependency tracker
package has a few distinguishing characteristics:

- It uses the AST to parse the Python files.  This is pretty reliable.

- No module is loaded.  Loading modules to figure out dependencies is
  almost always problem, because a lot of codebases run initialization
  code in the global namespace, which often requires additional setup.
  Snakefood is guaranteed not to have this problem (it just runs, no
  matter what).

- It works on a set of files, i.e. you do not have to specify a single
  script, you can select a directory (package or else) or a set of
  files.  It finds all the Python files recursively automatically.

- Your PYTHONPATH is automatically adjusted to include the required
  package roots.  It figures out the paths that are required from the
  files/directories given as input.  You should not have to setup
  ANYTHING.

- It does not have to automatically 'follow' dependencies between
  modules, i.e. by default it only considers the files and directories
  you specify on the command-line and their immediate dependencies.
  It also has an option to automatically include only the dependencies
  within the packages of the files you specify.

- It follows the UNIX philosophy of small programs that do one thing
  well: it consists of a few simple programs whose outputs you combine
  via pipes.  Graphing dependencies always requires the user to filter
  and cluster the filenames, so this is appropriate.  You can combine
  it with your favourite tools, grep, sed, etc.

- The code is darn simple and there very little of it.  We have run it
  on a variety of popular Python packages.

A problem with dependency trackers that run code is that they are
unreliable, due to the dynamic nature of Python (the presence of
imports within function calls and __import__ hooks makes it almost
impossible to always do the right thing).  This script aims at being
right 99% of the time, and we think that given the trade-offs, 99% is
good enough for 99% of the uses.  

I fully intend that this program work on all codebases.  It has been
tested on a number of popular open source codes (see the test
directory).
