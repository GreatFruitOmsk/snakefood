Return-Path: <matthew.fernandez@gmail.com>
Received: from compute3.internal (compute3.nyi.mail.srv.osa [10.202.2.43])
	 by sloti26m12 (Cyrus git2.5+0-git-fastmail-9457) with LMTPA;
	 Thu, 21 Nov 2013 01:24:35 -0500
X-Sieve: CMU Sieve 2.4
X-Spam-score: 0.0
X-Spam-hits: BAYES_40 -0.001, FREEMAIL_FROM 0.001, RCVD_IN_DNSWL_LOW -0.7, LANGUAGES en,
  BAYES_USED user, SA_VERSION 3.3.2
X-Spam-source: IP='209.85.213.52', Host='mail-yh0-f52.google.com', Country='US',
  FromHeader='com', MailFrom='com'
X-Spam-charsets: plain='ISO-8859-1'
X-Resolved-to: blais@fastmail.fm
X-Delivered-to: blais@furius.ca
X-Mail-from: matthew.fernandez@gmail.com
Received: from mx2 ([10.202.2.201])
  by compute3.internal (LMTPProxy); Thu, 21 Nov 2013 01:24:35 -0500
Received: from mail-yh0-f52.google.com (mail-yh0-f52.google.com [209.85.213.52])
	(using TLSv1 with cipher ECDHE-RSA-RC4-SHA (128/128 bits))
	(No client certificate requested)
	by mx2.messagingengine.com (Postfix) with ESMTPS id 898BC6C03A1
	for <blais@furius.ca>; Thu, 21 Nov 2013 01:24:34 -0500 (EST)
Received: by mail-yh0-f52.google.com with SMTP id i72so3036622yha.11
        for <blais@furius.ca>; Wed, 20 Nov 2013 22:24:33 -0800 (PST)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
        d=gmail.com; s=20120113;
        h=message-id:date:from:user-agent:mime-version:to:subject
         :content-type:content-transfer-encoding;
        bh=xPwShJTyDgcqg6IhMFaWBy5u2m8Wg9nDd4TfXWFsdYg=;
        b=B+xoLPISqWaben3R+SZNbibyKY/GEU/3EGFaRkMaGDN6UAbAPdouQWEQwUOLTsgXAr
         +kOqsRpNEHevTaTdgPEln4fCZWpri6dW33f+MCxSVkBgvayvf/a5EsU0o6Q6bc5+OF+Z
         yn3riIcyiy1XAD237oY+afUY/DQ7HVlZ2krYyrO3E2kA36IKndddgYpQPoiE78MBlj/9
         R4SKGDkHEln5JQmKCwUUObExVUJPDCFBN80joB1+ocQhSelyTxY8c1hnM4xyTmueXOMw
         EUjfcSmVxmZHTszhKDetsdIk1dUTi9qFK8tdOZqOGYas0Ry0bpQCGyjy5K7SdGdT+1WZ
         TB/Q==
X-Received: by 10.236.92.70 with SMTP id i46mr81600yhf.83.1385015073272;
        Wed, 20 Nov 2013 22:24:33 -0800 (PST)
Received: from ?IPv6:2402:1800:4000:1:bc29:4d92:380d:ec70? ([2402:1800:4000:1:bc29:4d92:380d:ec70])
        by mx.google.com with ESMTPSA id d26sm47258105yhj.25.2013.11.20.22.24.31
        for <blais@furius.ca>
        (version=TLSv1 cipher=ECDHE-RSA-RC4-SHA bits=128/128);
        Wed, 20 Nov 2013 22:24:32 -0800 (PST)
Message-ID: <528DA71D.308@gmail.com>
Date: Thu, 21 Nov 2013 17:24:29 +1100
From: Matthew Fernandez <matthew.fernandez@gmail.com>
User-Agent: Mozilla/5.0 (X11; Linux x86_64; rv:24.0) Gecko/20100101 Thunderbird/24.1.0
MIME-Version: 1.0
To: Martin Blais <blais@furius.ca>
Subject: [PATCH 2/5] Refactor argument parsing code out of gendeps
Content-Type: text/plain; charset=ISO-8859-1; format=flowed
Content-Transfer-Encoding: 7bit

Refactor argument parsing code out of gendeps.

This does nothing clever and still passes the arguments directly back into gendeps.

diff -r 2a3fc054a78b lib/python/snakefood/gendeps.py
--- a/lib/python/snakefood/gendeps.py	Thu Nov 21 17:08:38 2013 +1100
+++ b/lib/python/snakefood/gendeps.py	Thu Nov 21 17:15:28 2013 +1100
@@ -29,89 +29,9 @@



-def gendeps():
-    import optparse
-    parser = optparse.OptionParser(__doc__.strip())
-
-    parser.add_option('-i', '--internal', '--internal-only',
-                      default=0, action='count',
-                      help="Filter out dependencies that are outside of the "
-                      "roots of the input files. If internal is used twice, we "
-                      "filter down further the dependencies to the set of "
-                      "files that were processed only, not just to the files "
-                      "that live in the same roots.")
-
-    parser.add_option('-e', '--external', '--external-only',
-                      action='store_true',
-                      help="Filter out dependencies to modules within the "
-                      "roots of the input files. This can be used to find out "
-                      "what external modules a package depends on, for example. "
-                      "Note that it does not make sense to use --internal and "
-                      "--external at the same time, as --internal will reject "
-                      "all the dependencies --external allows would output.")
-
-    parser.add_option('-I', '--ignore', dest='ignores', action='append',
-                      default=def_ignores,
-                      help="Add the given directory name to the list to be ignored.")
-
-    parser.add_option('-v', '--verbose', action='count', default=0,
-                      help="Output more debugging information")
-    parser.add_option('-q', '--quiet', action='count', default=0,
-                      help="Output less debugging information")
-
-    parser.add_option('-f', '--follow', '-r', '--recursive', action='store_true',
-                      help="Follow the modules depended upon and trace their dependencies. "
-                      "WARNING: This can be slow.  Use --internal to limit the scope.")
-
-    parser.add_option('--print-roots', action='store_true',
-                      help="Only print the package roots corresponding to the input files."
-                      "This is mostly used for testing and troubleshooting.")
-
-    parser.add_option('-d', '--disable-pragmas', action='store_false',
-                      dest='do_pragmas', default=True,
-                      help="Disable processing of pragma directives as strings after imports.")
-
-    parser.add_option('-u', '--ignore-unused', action='store_true',
-                      help="Automatically ignore unused imports. (See sfood-checker.)")
-
-    opts, args = parser.parse_args()
-    opts.verbose -= opts.quiet
-    setup_logging(opts.verbose)
-
-    if not args:
-        logging.warning("Searching for files from current directory.")
-        args = ['.']
-
+def gendeps(args, opts, inroots):
      info = logging.info

-    if opts.internal and opts.external:
-        parser.error("Using --internal and --external at the same time does not make sense.")
-
-    if opts.print_roots:
-        inroots = find_roots(args, opts.ignores)
-        for dn in sorted(inroots):
-            print dn
-        return
-
-    info("")
-    info("Input paths:")
-    for arg in args:
-        fn = realpath(arg)
-        info('  %s' % fn)
-        if not exists(fn):
-            parser.error("Filename '%s' does not exist." % fn)
-
-    # Get the list of package roots for our input files and prepend them to the
-    # module search path to insure localized imports.
-    inroots = find_roots(args, opts.ignores)
-    if (opts.internal or opts.external) and not inroots:
-        parser.error("No package roots found from the given files or directories. "
-                     "Using --internal with these roots will generate no dependencies.")
-    info("")
-    info("Roots of the input files:")
-    for root in inroots:
-        info('  %s' % root)
-
      info("")
      info("Using the following import path to search for modules:")
      old_sys_path = sys.path
@@ -234,9 +154,95 @@
      sys.path = old_sys_path


+def parse_arguments():
+    import optparse
+    parser = optparse.OptionParser(__doc__.strip())
+
+    parser.add_option('-i', '--internal', '--internal-only',
+                      default=0, action='count',
+                      help="Filter out dependencies that are outside of the "
+                      "roots of the input files. If internal is used twice, we "
+                      "filter down further the dependencies to the set of "
+                      "files that were processed only, not just to the files "
+                      "that live in the same roots.")
+
+    parser.add_option('-e', '--external', '--external-only',
+                      action='store_true',
+                      help="Filter out dependencies to modules within the "
+                      "roots of the input files. This can be used to find out "
+                      "what external modules a package depends on, for example. "
+                      "Note that it does not make sense to use --internal and "
+                      "--external at the same time, as --internal will reject "
+                      "all the dependencies --external allows would output.")
+
+    parser.add_option('-I', '--ignore', dest='ignores', action='append',
+                      default=def_ignores,
+                      help="Add the given directory name to the list to be ignored.")
+
+    parser.add_option('-v', '--verbose', action='count', default=0,
+                      help="Output more debugging information")
+    parser.add_option('-q', '--quiet', action='count', default=0,
+                      help="Output less debugging information")
+
+    parser.add_option('-f', '--follow', '-r', '--recursive', action='store_true',
+                      help="Follow the modules depended upon and trace their dependencies. "
+                      "WARNING: This can be slow.  Use --internal to limit the scope.")
+
+    parser.add_option('--print-roots', action='store_true',
+                      help="Only print the package roots corresponding to the input files."
+                      "This is mostly used for testing and troubleshooting.")
+
+    parser.add_option('-d', '--disable-pragmas', action='store_false',
+                      dest='do_pragmas', default=True,
+                      help="Disable processing of pragma directives as strings after imports.")
+
+    parser.add_option('-u', '--ignore-unused', action='store_true',
+                      help="Automatically ignore unused imports. (See sfood-checker.)")
+
+    opts, args = parser.parse_args()
+    opts.verbose -= opts.quiet
+    setup_logging(opts.verbose)
+
+    if not args:
+        logging.warning("Searching for files from current directory.")
+        args = ['.']
+
+    info = logging.info
+
+    if opts.internal and opts.external:
+        parser.error("Using --internal and --external at the same time does not make sense.")
+
+    if opts.print_roots:
+        inroots = find_roots(args, opts.ignores)
+        for dn in sorted(inroots):
+            print dn
+        return
+
+    info("")
+    info("Input paths:")
+    for arg in args:
+        fn = realpath(arg)
+        info('  %s' % fn)
+        if not exists(fn):
+            parser.error("Filename '%s' does not exist." % fn)
+
+    # Get the list of package roots for our input files and prepend them to the
+    # module search path to insure localized imports.
+    inroots = find_roots(args, opts.ignores)
+    if (opts.internal or opts.external) and not inroots:
+        parser.error("No package roots found from the given files or directories. "
+                     "Using --internal with these roots will generate no dependencies.")
+    info("")
+    info("Roots of the input files:")
+    for root in inroots:
+        info('  %s' % root)
+
+    return args, opts, inroots
+
  def main():
      try:
-        gendeps()
+        args, opts, inroots = parse_arguments()
+        gendeps(args, opts, inroots)
      except KeyboardInterrupt:
          raise SystemExit("Interrupted.")

