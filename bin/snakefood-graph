#!/usr/bin/env python
"""
Read snakefood dependencies and output a visual graph.
"""

import sys, os, re
from os.path import *
from collections import defaultdict


# (Refactor candidate.)
def read_depends(f):
    "Generator for the dependencies read from the given file object."
    for line in f.xreadlines():
        try:
            yield eval(line)
        except Exception:
            logging.warning("Invalid line: '%s'" % line)

prefix = '''

digraph "source tree" {
     graph [ rankdir = "LR" ];

     overlap=scale;
     size="8,10";
     ratio="fill";
     fontsize="16";
     fontname="Helvetica";
     clusterrank="local";

//     node [
//         fontsize=7
//       style=ellipse
//     ];

'''
postfix = '''

}
'''

def graph(pairs, write):
    "Given (from, to) pairs of (root, fn) files, output a dot graph."
    write(prefix)
    lines = []
    for (froot, f), (troot, t) in pairs:
        if opts.pythonify_filenames:
            f = normpyfn(f)
            t = normpyfn(t)
        if opts.full_pathnames:
            f = join(froot, f)
            t = join(troot, t)
        write('"%s" -> "%s";\n' % (f, t))
    write(postfix)

def normpyfn(fn):
    "Normalize the python filenames for output."
    if fn.endswith('.py'):
        fn = fn[:-3]
    fn = fn.replace(os.sep, '.')
    return fn

def main():
    import optparse
    parser = optparse.OptionParser(__doc__.strip())

    parser.add_option('-f', '--full-pathnames', '--full', action='store_true',
                      help="Output the full pathnames, not just the relative.")

    parser.add_option('-p', '--pythonify-filenames', '--remove-extensions',
                      action='store_true',
                      help="Remove filename extensions in the graph and "
                      "replace slashes with dots.")

    global opts
    opts, args = parser.parse_args()

    if not args:
        args = ['-']
    for fn in args:
        f = sys.stdin if fn == '-' else open(fn)
        depends = read_depends(f)
        graph(depends, sys.stdout.write)


if __name__ == '__main__':
    main()

