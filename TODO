=====================
   TODO: snakefood
=====================

snakefood
=========

- Feature: When recursing through files, check for non .py files that
  may be Python code too and include them.

- Create a new snakefood-filter script that does the same as
  --internal.

- At the end of the run, you should output a clean list of all the
  modules that were not found, and if in debug mode, of all the
  symbols that were not modules, in one list.

- Modify the makefiles to keep the log files around.

- Add the missing codebases to tests

- Move --debug to --verbose, with type 'count'.  -v should enable
  DEBUG logging.  -vv should also print the offending code lines (see
  if the AST has a reference to the source code somehow).


snakefood-cluster
=================

- Support non-prefix clusters: We could try clustering a variety of
  modules by hand, according to the documentation groupings, but that
  would require supporting cluster groups that do not depend on a
  filename prefix.  Do that for stdlib analysis.

  Each of these clusters should be called "cluster groups".

- Add an option filter out/ignore all the files that are not in the
  declared clusters.


snakefood-graph
===============

- Support dot subgraphs somehow.  This program should be able to take
  some prefixes on the command-line and group the nodes together
  somehow.

- Support coloring: the program should take some prefixes on the
  command-line and colour the related nodes together.



Documentation
=============

- Add this documentation before 1.0:

  * The simplest possible run.

      “but this probably won't do what you want it to.”
      “there is not formula for filtering, that has to be a custom
       process.  See the Makefile provided in the test directory.”

  * Show the makefile rules.

  * Create a flow diagram of the different kinds of types generated.

    - Show what the various scripts do.

  * Explain the format of the deps file, including the special case of
    None, None.

  * Explain --internal

- Prepare submission and slides for PyCon presentation

  Talk outline:

  - intro/motivation: the use of dependencies
  - implementation details
    * zero config
    * does not run code
  - makefile + dataflow chart for deps/clusters/dot, etc.
  - examples
  - enforcing specific dependencies in a subversion hook



